Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: declaration_list : declaration_list COMMA ID

a,b

Line 2: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

a,b,c[3]

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c[3];

Line 2: statement : var_declaration

int a,b,c[3];

Line 2: statements : statement

int a,b,c[3];


Line 3: variable : ID

a


Line 3: factor : CONST_INT

1

Line 3: unary_expression : factor

1


Line 3: term : unary_expression

1


Line 3: factor : CONST_INT

2

Line 3: unary_expression : factor

2


Line 3: term : unary_expression

2


Line 3: simple_expression : term

2


Line 3: factor : CONST_INT

3

Line 3: unary_expression : factor

3


Line 3: term : unary_expression

3


Line 3: +
simple_expression : simple_expression ADDOP term

2+3

	MOV t0,2
	MOV ax,3
	ADD t0,ax

Line 3: rel_expression : simple_expression

2+3

	MOV t0,2
	MOV ax,3
	ADD t0,ax

Line 3: logic_expression : rel_expression

2+3

	MOV t0,2
	MOV ax,3
	ADD t0,ax

Line 3: expression : logic expression

2+3

	MOV t0,2
	MOV ax,3
	ADD t0,ax

Line 3: factor : LPAREN expression RPAREN

	MOV t0,2
	MOV ax,3
	ADD t0,ax

(2+3)

Line 3: unary_expression : factor

(2+3)

	MOV t0,2
	MOV ax,3
	ADD t0,ax

Line 3: term : term MULOP unary_expression

1*(2+3)

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax

Line 3: factor : CONST_INT

3

Line 3: unary_expression : factor

3


Line 3: term : term MULOP unary_expression

1*(2+3)%3

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx

Line 3: simple_expression : term

1*(2+3)%3

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx

Line 3: rel_expression : simple_expression

1*(2+3)%3

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx

Line 3: logic_expression : rel_expression

1*(2+3)%3

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx

Line 3: expression : variable ASSIGNOP logic_expression

a=1*(2+3)%3

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax

Line 3: expression_statement : expression SEMICOLON

a=1*(2+3)%3;

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax

Line 3: statement : expression_statement

a=1*(2+3)%3;

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax

Line 3: statements : statements statement

int a,b,c[3];
a=1*(2+3)%3;

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax

Line 4: variable : ID

b


Line 4: factor : CONST_INT

1

Line 4: unary_expression : factor

1


Line 4: term : unary_expression

1


Line 4: simple_expression : term

1


Line 4: factor : CONST_INT

5

Line 4: unary_expression : factor

5


Line 4: term : unary_expression

5


Line 4: simple_expression : term

5


Line 4: rel_expression : simple_expression RELOP simple_expression

1<5

	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx

Line 4: logic_expression : rel_expression

1<5

	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx

Line 4: expression : variable ASSIGNOP logic_expression

b=1<5

	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax

Line 4: expression_statement : expression SEMICOLON

b=1<5;

	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax

Line 4: statement : expression_statement

b=1<5;

	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax

Line 4: statements : statements statement

int a,b,c[3];
a=1*(2+3)%3;
b=1<5;

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax

Line 5: factor : CONST_INT

0

Line 5: unary_expression : factor

0


Line 5: term : unary_expression

0


Line 5: simple_expression : term

0


Line 5: rel_expression : simple_expression

0


Line 5: logic_expression : rel_expression

0


Line 5: expression : logic expression

0


Line 5: variable : ID LTHIRD expression RTHIRD

c[0]

	MOV bx,0
	ADD bx,bx

Line 5: factor : CONST_INT

2

Line 5: unary_expression : factor

2


Line 5: term : unary_expression

2


Line 5: simple_expression : term

2


Line 5: rel_expression : simple_expression

2


Line 5: logic_expression : rel_expression

2


Line 5: expression : variable ASSIGNOP logic_expression

c[0]=2

	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 5: expression_statement : expression SEMICOLON

c[0]=2;

	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 5: statement : expression_statement

c[0]=2;

	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 5: statements : statements statement

int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 6: variable : ID

a


Line 6: factor : variable

a


Line 6: unary_expression : factor

a


Line 6: term : unary_expression

a


Line 6: simple_expression : term

a


Line 6: rel_expression : simple_expression

a


Line 6: variable : ID

b


Line 6: factor : variable

b


Line 6: unary_expression : factor

b


Line 6: term : unary_expression

b


Line 6: simple_expression : term

b


Line 6: rel_expression : simple_expression

b


Line 6: logic_expression : rel_expression LOGICOP rel_expression

a&&b

	MOV ax,b1_1
	AND a1_1,ax

Line 6: expression : logic expression

a&&b

	MOV ax,b1_1
	AND a1_1,ax

Line 7: factor : CONST_INT

0

Line 7: unary_expression : factor

0


Line 7: term : unary_expression

0


Line 7: simple_expression : term

0


Line 7: rel_expression : simple_expression

0


Line 7: logic_expression : rel_expression

0


Line 7: expression : logic expression

0


Line 7: variable : ID LTHIRD expression RTHIRD

c[0]

	MOV bx,0
	ADD bx,bx

Line 7: factor : variable INCOP

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

c[0]++

Line 7: unary_expression : factor

c[0]++

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 7: term : unary_expression

c[0]++

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 7: simple_expression : term

c[0]++

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 7: rel_expression : simple_expression

c[0]++

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 7: logic_expression : rel_expression

c[0]++

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 7: expression : logic expression

c[0]++

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 7: expression_statement : expression SEMICOLON

c[0]++;

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 7: statement : expression_statement

c[0]++;

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t4,ax
	DEC c1_1[bx]

Line 9: factor : CONST_INT

1

Line 9: unary_expression : factor

1


Line 9: term : unary_expression

1


Line 9: simple_expression : term

1


Line 9: rel_expression : simple_expression

1


Line 9: logic_expression : rel_expression

1


Line 9: expression : logic expression

1


Line 9: variable : ID LTHIRD expression RTHIRD

c[1]

	MOV bx,1
	ADD bx,bx

Line 9: factor : CONST_INT

0

Line 9: unary_expression : factor

0


Line 9: term : unary_expression

0


Line 9: simple_expression : term

0


Line 9: rel_expression : simple_expression

0


Line 9: logic_expression : rel_expression

0


Line 9: expression : logic expression

0


Line 9: variable : ID LTHIRD expression RTHIRD

c[0]

	MOV bx,0
	ADD bx,bx

Line 9: factor : variable

c[0]

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax

Line 9: unary_expression : factor

c[0]

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax

Line 9: term : unary_expression

c[0]

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax

Line 9: simple_expression : term

c[0]

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax

Line 9: rel_expression : simple_expression

c[0]

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax

Line 9: logic_expression : rel_expression

c[0]

	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax

Line 9: expression : variable ASSIGNOP logic_expression

c[1]=c[0]

	MOV bx,1
	ADD bx,bx
	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax
	MOV ax,t5
	MOV c1_1[bx],ax

Line 9: expression_statement : expression SEMICOLON

c[1]=c[0];

	MOV bx,1
	ADD bx,bx
	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax
	MOV ax,t5
	MOV c1_1[bx],ax

Line 9: statement : expression_statement

c[1]=c[0];

	MOV bx,1
	ADD bx,bx
	MOV bx,0
	ADD bx,bx
	MOV ax,c1_1[bx]
	MOV t5,ax
	MOV ax,t5
	MOV c1_1[bx],ax

Line 9: statement : IF LPAREN expression RPAREN statement ELSE statement

if (a&&b)c[0]++;
else
c[1]=c[0];

Line 9: statements : statements statement

int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;
if (a&&b)c[0]++;
else
c[1]=c[0];

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 10: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

Line 10: statements : statements statement

int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;
if (a&&b)c[0]++;
else
c[1]=c[0];
printf(a);

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(b);

Line 11: statements : statements statement

int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;
if (a&&b)c[0]++;
else
c[1]=c[0];
printf(a);
printf(b);

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 12: compound_statement : LCURL statements RCURL

{
int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;
if (a&&b)c[0]++;
else
c[1]=c[0];
printf(a);
printf(b);
}

ScopeTable # 1.1
 7 --> < a , ID > 
 8 --> < b , ID > 
 9 --> < c , array > 

ScopeTable # 1
 1 --> < main , ID > 

	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax

Line 12: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;
if (a&&b)c[0]++;
else
c[1]=c[0];
printf(a);
printf(b);
}

main proc
	mov ax,@data
	mov ds,ax


	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax
main endp
Line 12: unit : func_definition

int main(){
int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;
if (a&&b)c[0]++;
else
c[1]=c[0];
printf(a);
printf(b);
}


main proc
	mov ax,@data
	mov ds,ax


	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax
main endp
Line 12: program : unit

int main(){
int a,b,c[3];
a=1*(2+3)%3;
b=1<5;
c[0]=2;
if (a&&b)c[0]++;
else
c[1]=c[0];
printf(a);
printf(b);
}


main proc
	mov ax,@data
	mov ds,ax


	MOV t0,2
	MOV ax,3
	ADD t0,ax
	MOV ax,1
	MOV dx,t0
	MUL dx
	MOV t1,ax
	MOV ax,t1
	XOR dx,dx
	MOV bx,3
	DIV bx
	MOV t2,dx
	MOV ax,t2
	MOV a1_1,ax
	MOV ax,1
	CMP ax,5
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t3,cx
	MOV ax,t3
	MOV b1_1,ax
	MOV bx,0
	ADD bx,bx
	MOV ax,2
	MOV c1_1[bx],ax
main endp
Line 13: start : program


ScopeTable # 1
 1 --> < main , ID > 


Total lines: 13
Total errors: 0
