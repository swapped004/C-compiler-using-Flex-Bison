At Line No: 1 type_specifier: INT

int

At Line No: 1 declaration_list : ID

x

At Line No: 1 declaration_list : declaration_list COMMA ID

x , y

At Line No: 1 declaration_list : declaration_list COMMA ID

x , y , z

At Line No: 1 var_declaration: type_specifier declaration_list SEMICOLON

int x , y , z ;

At Line No: 1 unit : var_declaration

int x , y , z ;

At Line No: 1 program : unit

int x , y , z ;

At Line No: 1 type_specifier: FLOAT

float

At Line No: 1 declaration_list : ID

a

At Line No: 1 var_declaration: type_specifier declaration_list SEMICOLON

float a ;

At Line No: 1 unit : var_declaration

float a ;

At Line No: 1 program : program unit

int x , y , z ; float a ;

At Line No: 3 type_specifier: VOID

void

At Line No: 3 func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

void foo ( ) ;

At Line No: 3 unit : func_declaration

void foo ( ) ;

At Line No: 3 program : program unit

int x , y , z ; float a ; void foo ( ) ;

At Line No: 5 type_specifier: INT

int

At Line No: 5 type_specifier: INT

int

At Line No: 5 parameter_list: type_specifier id

int a

At Line No: 5 type_specifier: INT

int

At Line No: 5 parameter_list: parameter_list COMMA type_specifier id

int a , int b

(a, int)
(b, int)
here in dummy token begin
(a, int)
(b, int)
here
At Line No: 6 variable : ID

a

At Line No: 6 factor: variable

a

At Line No: 6 unary_expression : factor

a

At Line No: 6 term :unary_expression

a

At Line No: 6 simple_expression : term

a

At Line No: 6 variable : ID

b

At Line No: 6 factor: variable

b

At Line No: 6 unary_expression : factor

b

At Line No: 6 term :unary_expression

b

At Line No: 6 simple_expression ADDOP term

a + b

At Line No: 6 rel_expression	: simple_expression

a + b

At Line No: 6 logic_expression : rel_expression

a + b

At Line No: 6 expression : logic_expression

a + b

RETURN symbol->name: return

At Line No: 6 statement: RETURN expression SEMICOLON
return a + b ;

At Line No: 6 statements : statement

return a + b ;

here in dummy token end
At Line No: 7 compound_statement: LCURL dum statements RCURL dum

{ return a + b ; }

At Line No: 7 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var ( int a , int b ) { return a + b ; }

At Line No: 7 unit : func_definition

int var ( int a , int b ) { return a + b ; }

At Line No: 7 program : program unit

int x , y , z ; float a ; void foo ( ) ; int var ( int a , int b ) { return a + b ; }

At Line No: 9 type_specifier: VOID

void

here in dummy token begin
At Line No: 10 variable : ID

x

At Line No: 10 factor: CONST_INT

2

At Line No: 10 unary_expression : factor

2

At Line No: 10 term :unary_expression

2

At Line No: 10 simple_expression : term

2

At Line No: 10 rel_expression	: simple_expression

2

At Line No: 10 logic_expression : rel_expression

2

At Line No: 10 expression : variable ASSIGNOP logic_expression

x = 2

At Line No: 10 expression SEMICOLON

x = 2;

At Line No: 10 statement : expression_statement

x = 2 ;

At Line No: 10 statements : statement

x = 2 ;

At Line No: 11 variable : ID

y

At Line No: 11 variable : ID

x

At Line No: 11 factor: variable

x

At Line No: 11 unary_expression : factor

x

At Line No: 11 term :unary_expression

x

At Line No: 11 simple_expression : term

x

At Line No: 11 factor: CONST_INT

5

At Line No: 11 unary_expression : factor

5

At Line No: 11 term :unary_expression

5

At Line No: 11 simple_expression ADDOP term

x - 5

At Line No: 11 rel_expression	: simple_expression

x - 5

At Line No: 11 logic_expression : rel_expression

x - 5

At Line No: 11 expression : variable ASSIGNOP logic_expression

y = x - 5

At Line No: 11 expression SEMICOLON

y = x - 5;

At Line No: 11 statement : expression_statement

y = x - 5 ;

At Line No: 11 statements : statements statement

x = 2 ; y = x - 5 ;

here in dummy token end
At Line No: 12 compound_statement: LCURL dum statements RCURL dum

{ x = 2 ; y = x - 5 ; }

At Line No: 12 func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo ( ) { x = 2 ; y = x - 5 ; }

At Line No: 12 unit : func_definition

void foo ( ) { x = 2 ; y = x - 5 ; }

At Line No: 12 program : program unit

int x , y , z ; float a ; void foo ( ) ; int var ( int a , int b ) { return a + b ; } void foo ( ) { x = 2 ; y = x - 5 ; }

At Line No: 14 type_specifier: VOID

void

here in dummy token begin
At Line No: 16 variable : ID

x

At Line No: 16 factor: CONST_INT

3

At Line No: 16 unary_expression : factor

3

At Line No: 16 term :unary_expression

3

At Line No: 16 simple_expression : term

3

At Line No: 16 rel_expression	: simple_expression

3

At Line No: 16 logic_expression : rel_expression

3

At Line No: 16 expression : variable ASSIGNOP logic_expression

x = 3

At Line No: 16 expression SEMICOLON

x = 3;

At Line No: 16 statement : expression_statement

x = 3 ;

At Line No: 16 statements : statement

x = 3 ;

here in dummy token end
At Line No: 17 compound_statement: LCURL dum statements RCURL dum

{ x = 3 ; }

At Line No: 17 func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo ( ) { x = 3 ; }

At Line No: 17 unit : func_definition

void foo ( ) { x = 3 ; }

At Line No: 17 program : program unit

int x , y , z ; float a ; void foo ( ) ; int var ( int a , int b ) { return a + b ; } void foo ( ) { x = 2 ; y = x - 5 ; } void foo ( ) { x = 3 ; }

At Line No: 19 type_specifier: INT

int

here in dummy token begin
At Line No: 20 type_specifier: INT

int

At Line No: 20 declaration_list: ID LTHIRD CONST_INT RTHIRD

a[ 2]

At Line No: 20 declaration_list : declaration_list COMMA ID

a [ 2 ] , c

At Line No: 20 declaration_list : declaration_list COMMA ID

a [ 2 ] , c , i

At Line No: 20 declaration_list : declaration_list COMMA ID

a [ 2 ] , c , i , j

At Line No: 20 var_declaration: type_specifier declaration_list SEMICOLON

int a [ 2 ] , c , i , j ;

At Line No: 20 statement : var_declaration

int a [ 2 ] , c , i , j ;

At Line No: 20 statements : statement

int a [ 2 ] , c , i , j ;

At Line No: 20 type_specifier: FLOAT

float

At Line No: 20 declaration_list : ID

d

At Line No: 20 var_declaration: type_specifier declaration_list SEMICOLON

float d ;

At Line No: 20 statement : var_declaration

float d ;

At Line No: 20 statements : statements statement

int a [ 2 ] , c , i , j ; float d ;

At Line No: 21 factor: CONST_INT

0

At Line No: 21 unary_expression : factor

0

At Line No: 21 term :unary_expression

0

At Line No: 21 simple_expression : term

0

At Line No: 21 rel_expression	: simple_expression

0

At Line No: 21 logic_expression : rel_expression

0

At Line No: 21 expression : logic_expression

0

At Line No: 21 variable : ID LTHIRD expression RTHIRD

a [ 0 ]

At Line No: 21 factor: CONST_INT

1

At Line No: 21 unary_expression : factor

1

At Line No: 21 term :unary_expression

1

At Line No: 21 simple_expression : term

1

At Line No: 21 rel_expression	: simple_expression

1

At Line No: 21 logic_expression : rel_expression

1

At Line No: 21 expression : variable ASSIGNOP logic_expression

a [ 0 ] = 1

At Line No: 21 expression SEMICOLON

a [ 0 ] = 1;

At Line No: 21 statement : expression_statement

a [ 0 ] = 1 ;

At Line No: 21 statements : statements statement

int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ;

At Line No: 22 factor: CONST_INT

1

At Line No: 22 unary_expression : factor

1

At Line No: 22 term :unary_expression

1

At Line No: 22 simple_expression : term

1

At Line No: 22 rel_expression	: simple_expression

1

At Line No: 22 logic_expression : rel_expression

1

At Line No: 22 expression : logic_expression

1

At Line No: 22 variable : ID LTHIRD expression RTHIRD

a [ 1 ]

At Line No: 22 factor: CONST_INT

5

At Line No: 22 unary_expression : factor

5

At Line No: 22 term :unary_expression

5

At Line No: 22 simple_expression : term

5

At Line No: 22 rel_expression	: simple_expression

5

At Line No: 22 logic_expression : rel_expression

5

At Line No: 22 expression : variable ASSIGNOP logic_expression

a [ 1 ] = 5

At Line No: 22 expression SEMICOLON

a [ 1 ] = 5;

At Line No: 22 statement : expression_statement

a [ 1 ] = 5 ;

At Line No: 22 statements : statements statement

int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ;

At Line No: 23 variable : ID

i

At Line No: 23 factor: CONST_INT

0

At Line No: 23 unary_expression : factor

0

At Line No: 23 term :unary_expression

0

At Line No: 23 simple_expression : term

0

At Line No: 23 rel_expression	: simple_expression

0

At Line No: 23 logic_expression : rel_expression

0

At Line No: 23 expression : logic_expression

0

At Line No: 23 variable : ID LTHIRD expression RTHIRD

a [ 0 ]

At Line No: 23 factor: variable

a [ 0 ]

At Line No: 23 unary_expression : factor

a [ 0 ]

At Line No: 23 term :unary_expression

a [ 0 ]

At Line No: 23 simple_expression : term

a [ 0 ]

At Line No: 23 factor: CONST_INT

1

At Line No: 23 unary_expression : factor

1

At Line No: 23 term :unary_expression

1

At Line No: 23 simple_expression : term

1

At Line No: 23 rel_expression	: simple_expression

1

At Line No: 23 logic_expression : rel_expression

1

At Line No: 23 expression : logic_expression

1

At Line No: 23 variable : ID LTHIRD expression RTHIRD

a [ 1 ]

At Line No: 23 factor: variable

a [ 1 ]

At Line No: 23 unary_expression : factor

a [ 1 ]

At Line No: 23 term :unary_expression

a [ 1 ]

At Line No: 23 simple_expression ADDOP term

a [ 0 ] + a [ 1 ]

At Line No: 23 rel_expression	: simple_expression

a [ 0 ] + a [ 1 ]

At Line No: 23 logic_expression : rel_expression

a [ 0 ] + a [ 1 ]

At Line No: 23 expression : variable ASSIGNOP logic_expression

i = a [ 0 ] + a [ 1 ]

At Line No: 23 expression SEMICOLON

i = a [ 0 ] + a [ 1 ];

At Line No: 23 statement : expression_statement

i = a [ 0 ] + a [ 1 ] ;

At Line No: 23 statements : statements statement

int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ;

At Line No: 24 variable : ID

j

At Line No: 24 factor: CONST_INT

2

At Line No: 24 unary_expression : factor

2

At Line No: 24 term :unary_expression

2

At Line No: 24 factor: CONST_INT

3

At Line No: 24 unary_expression : factor

3

At Line No: 24 term :term MULOP unary_expression

2 * 3

At Line No: 24 simple_expression : term

2 * 3

At Line No: 24 factor: CONST_INT

5

At Line No: 24 unary_expression : factor

5

At Line No: 24 term :unary_expression

5

At Line No: 24 factor: CONST_INT

3

At Line No: 24 unary_expression : factor

3

At Line No: 24 term :term MULOP unary_expression

5 % 3

At Line No: 24 simple_expression : term

5 % 3

At Line No: 24 factor: CONST_INT

4

At Line No: 24 unary_expression : factor

4

At Line No: 24 term :unary_expression

4

At Line No: 24 simple_expression : term

4

At Line No: 24 rel_expression	: simple_expression RELOP simple_expression

5 % 3 < 4

At Line No: 24 factor: CONST_INT

8

At Line No: 24 unary_expression : factor

8

At Line No: 24 term :unary_expression

8

At Line No: 24 simple_expression : term

8

At Line No: 24 rel_expression	: simple_expression

8

At Line No: 24 logic_expression : rel_expression LOGICOP rel_expression

5 % 3 < 4 && 8

At Line No: 24 expression : logic_expression

5 % 3 < 4 && 8

At Line No: 24 factor: LPAREN expression RPAREN

( 5 % 3 < 4 && 8 )

At Line No: 24 unary_expression : factor

( 5 % 3 < 4 && 8 )

At Line No: 24 term :unary_expression

( 5 % 3 < 4 && 8 )

At Line No: 24 simple_expression ADDOP term

2 * 3 + ( 5 % 3 < 4 && 8 )

At Line No: 24 rel_expression	: simple_expression

2 * 3 + ( 5 % 3 < 4 && 8 )

At Line No: 24 factor: CONST_INT

2

At Line No: 24 unary_expression : factor

2

At Line No: 24 term :unary_expression

2

At Line No: 24 simple_expression : term

2

At Line No: 24 rel_expression	: simple_expression

2

At Line No: 24 logic_expression : rel_expression LOGICOP rel_expression

2 * 3 + ( 5 % 3 < 4 && 8 ) || 2

At Line No: 24 expression : variable ASSIGNOP logic_expression

j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2

At Line No: 24 expression SEMICOLON

j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2;

At Line No: 24 statement : expression_statement

j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ;

At Line No: 24 statements : statements statement

int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ;

At Line No: 25 variable : ID

d

At Line No: 25 factor: CONST_INT

1

At Line No: 25 unary_expression : factor

1

At Line No: 25 term :unary_expression

1

At Line No: 25 simple_expression : term

1

At Line No: 25 rel_expression	: simple_expression

1

At Line No: 25 logic_expression : rel_expression

1

At Line No: 25 arguments : logic_expression

1
At Line No: 25 factor: CONST_INT

2

At Line No: 25 unary_expression : factor

2

At Line No: 25 term :unary_expression

2

At Line No: 25 factor: CONST_INT

3

At Line No: 25 unary_expression : factor

3

At Line No: 25 term :term MULOP unary_expression

2 * 3

At Line No: 25 simple_expression : term

2 * 3

At Line No: 25 rel_expression	: simple_expression

2 * 3

At Line No: 25 logic_expression : rel_expression

2 * 3

At Line No: 25 arguments : arguments COMMA logic_expression

1 , 2 * 3

At Line No: 25 argument_list : arguments

1 , 2 * 3
At Line No: 25 factor: id LPAREN argument_list RPAREN

var ( 1 , 2 * 3 )
At Line No: 25 unary_expression : factor

var ( 1 , 2 * 3 )

At Line No: 25 term :unary_expression

var ( 1 , 2 * 3 )

At Line No: 25 simple_expression : term

var ( 1 , 2 * 3 )

At Line No: 25 factor: CONST_FLOAT

3.5

At Line No: 25 unary_expression : factor

3.5

At Line No: 25 term :unary_expression

3.5

At Line No: 25 factor: CONST_INT

2

At Line No: 25 unary_expression : factor

2

At Line No: 25 term :term MULOP unary_expression

3.5 * 2

At Line No: 25 simple_expression ADDOP term

var ( 1 , 2 * 3 ) + 3.5 * 2

At Line No: 25 rel_expression	: simple_expression

var ( 1 , 2 * 3 ) + 3.5 * 2

At Line No: 25 logic_expression : rel_expression

var ( 1 , 2 * 3 ) + 3.5 * 2

At Line No: 25 expression : variable ASSIGNOP logic_expression

d = var ( 1 , 2 * 3 ) + 3.5 * 2

At Line No: 25 expression SEMICOLON

d = var ( 1 , 2 * 3 ) + 3.5 * 2;

At Line No: 25 statement : expression_statement

d = var ( 1 , 2 * 3 ) + 3.5 * 2 ;

At Line No: 25 statements : statements statement

int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ; d = var ( 1 , 2 * 3 ) + 3.5 * 2 ;

here
At Line No: 26 factor: CONST_INT

0

At Line No: 26 unary_expression : factor

0

At Line No: 26 term :unary_expression

0

At Line No: 26 simple_expression : term

0

At Line No: 26 rel_expression	: simple_expression

0

At Line No: 26 logic_expression : rel_expression

0

At Line No: 26 expression : logic_expression

0

RETURN symbol->name: return

At Line No: 26 statement: RETURN expression SEMICOLON
return 0 ;

At Line No: 26 statements : statements statement

int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ; d = var ( 1 , 2 * 3 ) + 3.5 * 2 ; return 0 ;

here in dummy token end
At Line No: 27 compound_statement: LCURL dum statements RCURL dum

{ int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ; d = var ( 1 , 2 * 3 ) + 3.5 * 2 ; return 0 ; }

At Line No: 27 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) { int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ; d = var ( 1 , 2 * 3 ) + 3.5 * 2 ; return 0 ; }

At Line No: 27 unit : func_definition

int main ( ) { int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ; d = var ( 1 , 2 * 3 ) + 3.5 * 2 ; return 0 ; }

At Line No: 27 program : program unit

int x , y , z ; float a ; void foo ( ) ; int var ( int a , int b ) { return a + b ; } void foo ( ) { x = 2 ; y = x - 5 ; } void foo ( ) { x = 3 ; } int main ( ) { int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ; d = var ( 1 , 2 * 3 ) + 3.5 * 2 ; return 0 ; }

At Line No: 27 start : program

int x , y , z ; float a ; void foo ( ) ; int var ( int a , int b ) { return a + b ; } void foo ( ) { x = 2 ; y = x - 5 ; } void foo ( ) { x = 3 ; } int main ( ) { int a [ 2 ] , c , i , j ; float d ; a [ 0 ] = 1 ; a [ 1 ] = 5 ; i = a [ 0 ] + a [ 1 ] ; j = 2 * 3 + ( 5 % 3 < 4 && 8 ) || 2 ; d = var ( 1 , 2 * 3 ) + 3.5 * 2 ; return 0 ; }

