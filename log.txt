Line 1: type_specifier : INT

int

Line 1: type_specifier : INT

int

Line 1: parameter_list : type_specifier ID

int a

Line 2: factor : CONST_INT

2

Line 2: unary_expression : factor

2


Line 2: term : unary_expression

2


Line 2: variable : ID

a


Line 2: factor : variable

a


Line 2: unary_expression : factor

a


Line 2: term : term MULOP unary_expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: simple_expression : term

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: rel_expression : simple_expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: logic_expression : rel_expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: expression : logic expression

2*a

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax

Line 2: statement : RETURN expression SEMICOLON

return 2*a;

Line 2: statements : statement

return 2*a;

;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax

Line 3: variable : ID

a


Line 3: factor : CONST_INT

9

Line 3: unary_expression : factor

9


Line 3: term : unary_expression

9


Line 3: simple_expression : term

9


Line 3: rel_expression : simple_expression

9


Line 3: logic_expression : rel_expression

9


Line 3: expression : variable ASSIGNOP logic_expression

a=9

	MOV ax,9
	MOV [bp+12],ax

Line 3: expression_statement : expression SEMICOLON

a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 3: statement : expression_statement

a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 3: statements : statements statement

return 2*a;
a=9;

;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 4: compound_statement : LCURL statements RCURL

{
return 2*a;
a=9;
}

ScopeTable # 1.1
 7 --> < a , ID > 

ScopeTable # 1
 12 --> < f , ID > 

;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax

Line 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f(int a){
return 2*a;
a=9;
}

Line 4: unit : func_definition

int f(int a){
return 2*a;
a=9;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp

Line 4: program : unit

int f(int a){
return 2*a;
a=9;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp

Line 6: type_specifier : INT

int

Line 6: type_specifier : INT

int

Line 6: parameter_list : type_specifier ID

int a

Line 6: type_specifier : INT

int

Line 6: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 7: type_specifier : INT

int

Line 7: declaration_list : ID

x

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int x;

Line 7: statement : var_declaration

int x;

Line 7: statements : statement

int x;

;int
;x;


Line 8: variable : ID

x


Line 8: variable : ID

a


Line 8: factor : variable

a


Line 8: unary_expression : factor

a


Line 8: term : unary_expression

a


Line 8: simple_expression : term

a


Line 8: rel_expression : simple_expression

a


Line 8: logic_expression : rel_expression

a


Line 8: arguments : logic_expression

a

Line 8: argument_list : arguments

a
Line 8: factor : ID LPAREN argument_list RPAREN

f(a)
	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: unary_expression : factor

f(a)

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: term : unary_expression

f(a)

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: simple_expression : term

f(a)

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax

Line 8: variable : ID

a


Line 8: factor : variable

a


Line 8: unary_expression : factor

a


Line 8: term : unary_expression

a


Line 8: +
simple_expression : simple_expression ADDOP term

f(a)+a

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax

Line 8: variable : ID

b


Line 8: factor : variable

b


Line 8: unary_expression : factor

b


Line 8: term : unary_expression

b


Line 8: +
simple_expression : simple_expression ADDOP term

f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax

Line 8: rel_expression : simple_expression

f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax

Line 8: logic_expression : rel_expression

f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax

Line 8: expression : variable ASSIGNOP logic_expression

x=f(a)+a+b

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 8: expression_statement : expression SEMICOLON

x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 8: statement : expression_statement

x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 8: statements : statements statement

int x;
x=f(a)+a+b;

;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax

Line 9: variable : ID

x


Line 9: factor : variable

x


Line 9: unary_expression : factor

x


Line 9: term : unary_expression

x


Line 9: simple_expression : term

x


Line 9: rel_expression : simple_expression

x


Line 9: logic_expression : rel_expression

x


Line 9: expression : logic expression

x


Line 9: statement : RETURN expression SEMICOLON

return x;

Line 9: statements : statements statement

int x;
x=f(a)+a+b;
return x;

;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax

Line 10: compound_statement : LCURL statements RCURL

{
int x;
x=f(a)+a+b;
return x;
}

ScopeTable # 1.2
 0 --> < x , ID > 
 7 --> < a , ID > 
 8 --> < b , ID > 

ScopeTable # 1
 12 --> < f , ID > 
 13 --> < g , ID > 

;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax

Line 10: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}

Line 10: unit : func_definition

int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}


g PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
g endp

Line 10: program : program unit

int f(int a){
return 2*a;
a=9;
}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp
g PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
g endp

Line 12: type_specifier : INT

int

Line 12: type_specifier : INT

int

Line 12: parameter_list : type_specifier ID

int a

Line 14: variable : ID

a


Line 14: factor : variable

a


Line 14: unary_expression : factor

a


Line 14: term : unary_expression

a


Line 14: simple_expression : term

a


Line 14: factor : CONST_INT

1

Line 14: unary_expression : factor

1


Line 14: term : unary_expression

1


Line 14: simple_expression : term

1


Line 14: rel_expression : simple_expression RELOP simple_expression

a<=1

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx

Line 14: logic_expression : rel_expression

a<=1

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx

Line 14: expression : logic expression

a<=1

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx

Line 16: factor : CONST_INT

1

Line 16: unary_expression : factor

1


Line 16: term : unary_expression

1


Line 16: simple_expression : term

1


Line 16: rel_expression : simple_expression

1


Line 16: logic_expression : rel_expression

1


Line 16: expression : logic expression

1


Line 16: statement : RETURN expression SEMICOLON

return 1;

Line 16: statements : statement

return 1;

;return
;1;

	MOV ax,1
	MOV ret_temp,ax

Line 17: compound_statement : LCURL statements RCURL

{
return 1;
}

ScopeTable # 1.3.1
 7 --> < a , ID > 

ScopeTable # 1.3
 7 --> < a , ID > 

ScopeTable # 1
 12 --> < f , ID > 
 13 --> < g , ID > 
 14 --> < h , ID > 

;return
;1;

	MOV ax,1
	MOV ret_temp,ax

Line 17: statement : compound_statement

{
return 1;
}

;return
;1;

	MOV ax,1
	MOV ret_temp,ax

Line 21: variable : ID

a


Line 21: factor : variable

a


Line 21: unary_expression : factor

a


Line 21: term : unary_expression

a


Line 21: variable : ID

a


Line 21: factor : variable

a


Line 21: unary_expression : factor

a


Line 21: term : unary_expression

a


Line 21: simple_expression : term

a


Line 21: factor : CONST_INT

1

Line 21: unary_expression : factor

1


Line 21: term : unary_expression

1


Line 21: -
simple_expression : simple_expression ADDOP term

a-1

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax

Line 21: rel_expression : simple_expression

a-1

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax

Line 21: logic_expression : rel_expression

a-1

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax

Line 21: arguments : logic_expression

a-1

Line 21: argument_list : arguments

a-1
Line 21: factor : ID LPAREN argument_list RPAREN

h(a-1)
	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax

Line 21: unary_expression : factor

h(a-1)

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax

Line 21: term : term MULOP unary_expression

a*h(a-1)

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax

Line 21: simple_expression : term

a*h(a-1)

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax

Line 21: rel_expression : simple_expression

a*h(a-1)

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax

Line 21: logic_expression : rel_expression

a*h(a-1)

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax

Line 21: expression : logic expression

a*h(a-1)

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax

Line 21: statement : RETURN expression SEMICOLON

return a*h(a-1);

Line 21: statements : statement

return a*h(a-1);

;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax

Line 22: compound_statement : LCURL statements RCURL

{
return a*h(a-1);
}

ScopeTable # 1.3.2
 7 --> < a , ID > 

ScopeTable # 1.3
 7 --> < a , ID > 

ScopeTable # 1
 12 --> < f , ID > 
 13 --> < g , ID > 
 14 --> < h , ID > 

;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax

Line 22: statement : compound_statement

{
return a*h(a-1);
}

;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax

Line 22: statement : IF LPAREN expression RPAREN statement ELSE statement

if (a<=1){
return 1;
}
else
{
return a*h(a-1);
}

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,1
	JE L2
;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax
	JMP L3
L2:
;return
;1;

	MOV ax,1
	MOV ret_temp,ax
L3:

Line 22: statements : statement

if (a<=1){
return 1;
}
else
{
return a*h(a-1);
}

;if
;(a<=1){
;return
;1;
;}
;else
;{
;return
;a*h(a-1);
;}

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,1
	JE L2
;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax
	JMP L3
L2:
;return
;1;

	MOV ax,1
	MOV ret_temp,ax
L3:

Line 23: compound_statement : LCURL statements RCURL

{
if (a<=1){
return 1;
}
else
{
return a*h(a-1);
}
}

ScopeTable # 1.3
 7 --> < a , ID > 

ScopeTable # 1
 12 --> < f , ID > 
 13 --> < g , ID > 
 14 --> < h , ID > 

;if
;(a<=1){
;return
;1;
;}
;else
;{
;return
;a*h(a-1);
;}

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,1
	JE L2
;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax
	JMP L3
L2:
;return
;1;

	MOV ax,1
	MOV ret_temp,ax
L3:

Line 23: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int h(int a){
if (a<=1){
return 1;
}
else
{
return a*h(a-1);
}
}

Line 23: unit : func_definition

int h(int a){
if (a<=1){
return 1;
}
else
{
return a*h(a-1);
}
}


h PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;if
;(a<=1){
;return
;1;
;}
;else
;{
;return
;a*h(a-1);
;}

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,1
	JE L2
;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax
	JMP L3
L2:
;return
;1;

	MOV ax,1
	MOV ret_temp,ax
L3:
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
h endp

Line 23: program : program unit

int f(int a){
return 2*a;
a=9;
}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}
int h(int a){
if (a<=1){
return 1;
}
else
{
return a*h(a-1);
}
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp
g PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
g endp
h PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;if
;(a<=1){
;return
;1;
;}
;else
;{
;return
;a*h(a-1);
;}

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,1
	JE L2
;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax
	JMP L3
L2:
;return
;1;

	MOV ax,1
	MOV ret_temp,ax
L3:
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
h endp

Line 25: type_specifier : INT

int

Line 26: type_specifier : INT

int

Line 26: declaration_list : ID

a

Line 26: declaration_list : declaration_list COMMA ID

a,b

Line 26: var_declaration : type_specifier declaration_list SEMICOLON

int a,b;

Line 26: statement : var_declaration

int a,b;

Line 26: statements : statement

int a,b;

;int
;a,b;


Line 27: variable : ID

a


Line 27: factor : CONST_INT

1

Line 27: unary_expression : factor

1


Line 27: term : unary_expression

1


Line 27: simple_expression : term

1


Line 27: rel_expression : simple_expression

1


Line 27: logic_expression : rel_expression

1


Line 27: expression : variable ASSIGNOP logic_expression

a=1

	MOV ax,1
	MOV a1_4,ax

Line 27: expression_statement : expression SEMICOLON

a=1;

	MOV ax,1
	MOV a1_4,ax

Line 27: statement : expression_statement

a=1;

	MOV ax,1
	MOV a1_4,ax

Line 27: statements : statements statement

int a,b;
a=1;

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax

Line 28: variable : ID

b


Line 28: factor : CONST_INT

2

Line 28: unary_expression : factor

2


Line 28: term : unary_expression

2


Line 28: simple_expression : term

2


Line 28: rel_expression : simple_expression

2


Line 28: logic_expression : rel_expression

2


Line 28: expression : variable ASSIGNOP logic_expression

b=2

	MOV ax,2
	MOV b1_4,ax

Line 28: expression_statement : expression SEMICOLON

b=2;

	MOV ax,2
	MOV b1_4,ax

Line 28: statement : expression_statement

b=2;

	MOV ax,2
	MOV b1_4,ax

Line 28: statements : statements statement

int a,b;
a=1;
b=2;

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax

Line 29: variable : ID

a


Line 29: variable : ID

a


Line 29: factor : variable

a


Line 29: unary_expression : factor

a


Line 29: term : unary_expression

a


Line 29: simple_expression : term

a


Line 29: rel_expression : simple_expression

a


Line 29: logic_expression : rel_expression

a


Line 29: arguments : logic_expression

a

Line 29: variable : ID

b


Line 29: factor : variable

b


Line 29: unary_expression : factor

b


Line 29: term : unary_expression

b


Line 29: simple_expression : term

b


Line 29: rel_expression : simple_expression

b


Line 29: logic_expression : rel_expression

b


Line 29: arguments : arguments COMMA logic_expression

a,b

Line 29: argument_list : arguments

a,b
Line 29: factor : ID LPAREN argument_list RPAREN

g(a,b)
	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 29: unary_expression : factor

g(a,b)

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 29: term : unary_expression

g(a,b)

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 29: simple_expression : term

g(a,b)

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 29: rel_expression : simple_expression

g(a,b)

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 29: logic_expression : rel_expression

g(a,b)

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax

Line 29: expression : variable ASSIGNOP logic_expression

a=g(a,b)

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax

Line 29: expression_statement : expression SEMICOLON

a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax

Line 29: statement : expression_statement

a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax

Line 29: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax

Line 30: variable : ID

b


Line 30: variable : ID

a


Line 30: factor : variable

a


Line 30: unary_expression : factor

a


Line 30: term : unary_expression

a


Line 30: simple_expression : term

a


Line 30: rel_expression : simple_expression

a


Line 30: logic_expression : rel_expression

a


Line 30: arguments : logic_expression

a

Line 30: argument_list : arguments

a
Line 30: factor : ID LPAREN argument_list RPAREN

h(a)
	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax

Line 30: unary_expression : factor

h(a)

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax

Line 30: term : unary_expression

h(a)

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax

Line 30: simple_expression : term

h(a)

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax

Line 30: rel_expression : simple_expression

h(a)

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax

Line 30: logic_expression : rel_expression

h(a)

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax

Line 30: expression : variable ASSIGNOP logic_expression

b=h(a)

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax

Line 30: expression_statement : expression SEMICOLON

b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax

Line 30: statement : expression_statement

b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax

Line 30: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax

Line 32: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

Line 32: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);
printf(a);

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax
;printf(a);

	MOV ax,a1_4
	MOV print_var,ax
	CALL print

Line 33: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(b);

Line 33: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);
printf(a);
printf(b);

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax
;printf(a);

	MOV ax,a1_4
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_4
	MOV print_var,ax
	CALL print

Line 34: factor : CONST_INT

0

Line 34: unary_expression : factor

0


Line 34: term : unary_expression

0


Line 34: simple_expression : term

0


Line 34: rel_expression : simple_expression

0


Line 34: logic_expression : rel_expression

0


Line 34: expression : logic expression

0


Line 34: statement : RETURN expression SEMICOLON

return 0;

Line 34: statements : statements statement

int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);
printf(a);
printf(b);
return 0;

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax
;printf(a);

	MOV ax,a1_4
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_4
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax

Line 35: compound_statement : LCURL statements RCURL

{
int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);
printf(a);
printf(b);
return 0;
}

ScopeTable # 1.4
 7 --> < a , ID > 
 8 --> < b , ID > 

ScopeTable # 1
 1 --> < main , ID > 
 12 --> < f , ID > 
 13 --> < g , ID > 
 14 --> < h , ID > 

;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax
;printf(a);

	MOV ax,a1_4
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_4
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax

Line 35: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);
printf(a);
printf(b);
return 0;
}

main proc
	mov ax,@data
	mov ds,ax


;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax
;printf(a);

	MOV ax,a1_4
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_4
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 35: unit : func_definition

int main(){
int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);
printf(a);
printf(b);
return 0;
}


main proc
	mov ax,@data
	mov ds,ax


;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax
;printf(a);

	MOV ax,a1_4
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_4
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 35: program : program unit

int f(int a){
return 2*a;
a=9;
}
int g(int a,int b){
int x;
x=f(a)+a+b;
return x;
}
int h(int a){
if (a<=1){
return 1;
}
else
{
return a*h(a-1);
}
}
int main(){
int a,b;
a=1;
b=2;
a=g(a,b);
b=h(a);
printf(a);
printf(b);
return 0;
}


f PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;return
;2*a;

	MOV ax,2
	MOV dx,[bp+12]
	MUL dx
	MOV t0,ax
	MOV ax,t0
	MOV ret_temp,ax
;a=9;

	MOV ax,9
	MOV [bp+12],ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
f endp
g PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;int
;x;

;x=f(a)+a+b;

	PUSH [bp+14]
	CALL f
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	ADD ax,[bp+14]
	MOV t1,ax
	MOV ax,t1
	ADD ax,[bp+12]
	MOV t2,ax
	MOV ax,t2
	MOV x1_2,ax
;return
;x;

	MOV ax,x1_2
	MOV ret_temp,ax
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
g endp
h PROC
	PUSH ax
	PUSH bx
	PUSH cx
	PUSH dx
	PUSH bp
	MOV bp,sp
;if
;(a<=1){
;return
;1;
;}
;else
;{
;return
;a*h(a-1);
;}

	MOV ax,[bp+12]
	CMP ax,1
	JLE L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,1
	JE L2
;return
;a*h(a-1);

	MOV ax,[bp+12]
	SUB ax,1
	MOV t0,ax
	PUSH t0
	CALL h
	MOV ax,ret_temp
	MOV t1,ax
	MOV ax,[bp+12]
	MOV dx,t1
	MUL dx
	MOV t2,ax
	MOV ax,t2
	MOV ret_temp,ax
	JMP L3
L2:
;return
;1;

	MOV ax,1
	MOV ret_temp,ax
L3:
	POP bp
	POP dx
	POP cx
	POP bx
	POP ax
	RET 2
h endp
main proc
	mov ax,@data
	mov ds,ax


;int
;a,b;

;a=1;

	MOV ax,1
	MOV a1_4,ax
;b=2;

	MOV ax,2
	MOV b1_4,ax
;a=g(a,b);

	PUSH a1_4
	PUSH b1_4
	CALL g
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV a1_4,ax
;b=h(a);

	PUSH a1_4
	CALL h
	MOV ax,ret_temp
	MOV t0,ax
	MOV ax,t0
	MOV b1_4,ax
;printf(a);

	MOV ax,a1_4
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_4
	MOV print_var,ax
	CALL print
;return
;0;

	MOV ax,0
	MOV ret_temp,ax
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 36: start : program


ScopeTable # 1
 1 --> < main , ID > 
 12 --> < f , ID > 
 13 --> < g , ID > 
 14 --> < h , ID > 


Total lines: 36
Total errors: 0
