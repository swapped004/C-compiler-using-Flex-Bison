Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: declaration_list : declaration_list COMMA ID

a,b

Line 2: declaration_list : declaration_list COMMA ID

a,b,c

Line 2: declaration_list : declaration_list COMMA ID

a,b,c,i

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c,i;

Line 2: statement : var_declaration

int a,b,c,i;

Line 2: statements : statement

int a,b,c,i;

;int
;a,b,c,i;


Line 3: variable : ID

b


Line 3: factor : CONST_INT

0

Line 3: unary_expression : factor

0


Line 3: term : unary_expression

0


Line 3: simple_expression : term

0


Line 3: rel_expression : simple_expression

0


Line 3: logic_expression : rel_expression

0


Line 3: expression : variable ASSIGNOP logic_expression

b=0

	MOV ax,0
	MOV b1_1,ax

Line 3: expression_statement : expression SEMICOLON

b=0;

	MOV ax,0
	MOV b1_1,ax

Line 3: statement : expression_statement

b=0;

	MOV ax,0
	MOV b1_1,ax

Line 3: statements : statements statement

int a,b,c,i;
b=0;

;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax

Line 4: variable : ID

c


Line 4: factor : CONST_INT

1

Line 4: unary_expression : factor

1


Line 4: term : unary_expression

1


Line 4: simple_expression : term

1


Line 4: rel_expression : simple_expression

1


Line 4: logic_expression : rel_expression

1


Line 4: expression : variable ASSIGNOP logic_expression

c=1

	MOV ax,1
	MOV c1_1,ax

Line 4: expression_statement : expression SEMICOLON

c=1;

	MOV ax,1
	MOV c1_1,ax

Line 4: statement : expression_statement

c=1;

	MOV ax,1
	MOV c1_1,ax

Line 4: statements : statements statement

int a,b,c,i;
b=0;
c=1;

;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax

Line 5: variable : ID

i


Line 5: factor : CONST_INT

0

Line 5: unary_expression : factor

0


Line 5: term : unary_expression

0


Line 5: simple_expression : term

0


Line 5: rel_expression : simple_expression

0


Line 5: logic_expression : rel_expression

0


Line 5: expression : variable ASSIGNOP logic_expression

i=0

	MOV ax,0
	MOV i1_1,ax

Line 5: expression_statement : expression SEMICOLON

i=0;

	MOV ax,0
	MOV i1_1,ax

Line 5: variable : ID

i


Line 5: factor : variable

i


Line 5: unary_expression : factor

i


Line 5: term : unary_expression

i


Line 5: simple_expression : term

i


Line 5: factor : CONST_INT

4

Line 5: unary_expression : factor

4


Line 5: term : unary_expression

4


Line 5: simple_expression : term

4


Line 5: rel_expression : simple_expression RELOP simple_expression

i<4

	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx

Line 5: logic_expression : rel_expression

i<4

	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx

Line 5: expression : logic expression

i<4

	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx

Line 5: expression_statement : expression SEMICOLON

i<4;

	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx

Line 5: variable : ID

i


Line 5: factor : variable INCOP

	MOV ax,i1_1
	MOV t1,ax
	INC i1_1

i++

Line 5: unary_expression : factor

i++

	MOV ax,i1_1
	MOV t1,ax
	INC i1_1

Line 5: term : unary_expression

i++

	MOV ax,i1_1
	MOV t1,ax
	INC i1_1

Line 5: simple_expression : term

i++

	MOV ax,i1_1
	MOV t1,ax
	INC i1_1

Line 5: rel_expression : simple_expression

i++

	MOV ax,i1_1
	MOV t1,ax
	INC i1_1

Line 5: logic_expression : rel_expression

i++

	MOV ax,i1_1
	MOV t1,ax
	INC i1_1

Line 5: expression : logic expression

i++

	MOV ax,i1_1
	MOV t1,ax
	INC i1_1

Line 6: variable : ID

a


Line 6: factor : CONST_INT

3

Line 6: unary_expression : factor

3


Line 6: term : unary_expression

3


Line 6: simple_expression : term

3


Line 6: rel_expression : simple_expression

3


Line 6: logic_expression : rel_expression

3


Line 6: expression : variable ASSIGNOP logic_expression

a=3

	MOV ax,3
	MOV a1_1,ax

Line 6: expression_statement : expression SEMICOLON

a=3;

	MOV ax,3
	MOV a1_1,ax

Line 6: statement : expression_statement

a=3;

	MOV ax,3
	MOV a1_1,ax

Line 6: statements : statement

a=3;

;a=3;

	MOV ax,3
	MOV a1_1,ax

Line 7: variable : ID

a


Line 7: factor : variable DECOP

	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1

a--

Line 7: unary_expression : factor

a--

	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1

Line 7: term : unary_expression

a--

	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1

Line 7: simple_expression : term

a--

	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1

Line 7: rel_expression : simple_expression

a--

	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1

Line 7: logic_expression : rel_expression

a--

	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1

Line 7: expression : logic expression

a--

	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1

Line 8: variable : ID

b


Line 8: factor : variable INCOP

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

b++

Line 8: unary_expression : factor

b++

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: term : unary_expression

b++

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: simple_expression : term

b++

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: rel_expression : simple_expression

b++

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: logic_expression : rel_expression

b++

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: expression : logic expression

b++

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: expression_statement : expression SEMICOLON

b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: statement : expression_statement

b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 8: statements : statement

b++;

;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 9: compound_statement : LCURL statements RCURL

{
b++;
}

ScopeTable # 1.1.1.1

ScopeTable # 1.1.1

ScopeTable # 1.1
 7 --> < a , ID > 
 8 --> < b , ID > 
 9 --> < c , ID > 
 15 --> < i , ID > 

ScopeTable # 1
 1 --> < main , ID > 

;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 9: statement : compound_statement

{
b++;
}

;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1

Line 9: statement : WHILE LPAREN expression RPAREN statement

while (a--){
b++;
}

Line 9: statements : statements statement

a=3;
while (a--){
b++;
}

;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:

Line 10: compound_statement : LCURL statements RCURL

{
a=3;
while (a--){
b++;
}
}

ScopeTable # 1.1.1

ScopeTable # 1.1
 7 --> < a , ID > 
 8 --> < b , ID > 
 9 --> < c , ID > 
 15 --> < i , ID > 

ScopeTable # 1
 1 --> < main , ID > 

;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:

Line 10: statement : compound_statement

{
a=3;
while (a--){
b++;
}
}

;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:

Line 10: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}

Line 10: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}

;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

Line 11: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}
printf(a);

;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:
;printf(a);

	MOV ax,a1_1
	MOV print_var,ax
	CALL print

Line 12: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(b);

Line 12: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}
printf(a);
printf(b);

;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:
;printf(a);

	MOV ax,a1_1
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_1
	MOV print_var,ax
	CALL print

Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(c);

Line 13: statements : statements statement

int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}
printf(a);
printf(b);
printf(c);

;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:
;printf(a);

	MOV ax,a1_1
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_1
	MOV print_var,ax
	CALL print
;printf(c);

	MOV ax,c1_1
	MOV print_var,ax
	CALL print

Line 14: compound_statement : LCURL statements RCURL

{
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}
printf(a);
printf(b);
printf(c);
}

ScopeTable # 1.1
 7 --> < a , ID > 
 8 --> < b , ID > 
 9 --> < c , ID > 
 15 --> < i , ID > 

ScopeTable # 1
 1 --> < main , ID > 

;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:
;printf(a);

	MOV ax,a1_1
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_1
	MOV print_var,ax
	CALL print
;printf(c);

	MOV ax,c1_1
	MOV print_var,ax
	CALL print

Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}
printf(a);
printf(b);
printf(c);
}

main proc
	mov ax,@data
	mov ds,ax


;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:
;printf(a);

	MOV ax,a1_1
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_1
	MOV print_var,ax
	CALL print
;printf(c);

	MOV ax,c1_1
	MOV print_var,ax
	CALL print
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 14: unit : func_definition

int main(){
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}
printf(a);
printf(b);
printf(c);
}


main proc
	mov ax,@data
	mov ds,ax


;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:
;printf(a);

	MOV ax,a1_1
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_1
	MOV print_var,ax
	CALL print
;printf(c);

	MOV ax,c1_1
	MOV print_var,ax
	CALL print
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 14: program : unit

int main(){
int a,b,c,i;
b=0;
c=1;
for(i=0;i<4;i++){
a=3;
while (a--){
b++;
}
}
printf(a);
printf(b);
printf(c);
}


main proc
	mov ax,@data
	mov ds,ax


;int
;a,b,c,i;

;b=0;

	MOV ax,0
	MOV b1_1,ax
;c=1;

	MOV ax,1
	MOV c1_1,ax
;for(i=0;i<4;i++){
;a=3;
;while
;(a--){
;b++;
;}
;}

	MOV ax,0
	MOV i1_1,ax
L4:
	MOV ax,i1_1
	CMP ax,4
	JL L0
	MOV cx,0
	JMP L1
L0:
	MOV cx,1
L1:
	MOV t0,cx
	CMP t0,0
	JE L5
;a=3;

	MOV ax,3
	MOV a1_1,ax
;while
;(a--){
;b++;
;}

L2:
	MOV ax,a1_1
	MOV t2,ax
	DEC a1_1
	CMP t2,0
	JE L3
;b++;

	MOV ax,b1_1
	MOV t3,ax
	INC b1_1
	JMP L2
L3:
	MOV ax,i1_1
	MOV t1,ax
	INC i1_1
	JMP L4
L5:
;printf(a);

	MOV ax,a1_1
	MOV print_var,ax
	CALL print
;printf(b);

	MOV ax,b1_1
	MOV print_var,ax
	CALL print
;printf(c);

	MOV ax,c1_1
	MOV print_var,ax
	CALL print
	MOV AH,4CH
	INT 21H
ENDP main
END main
Line 15: start : program


ScopeTable # 1
 1 --> < main , ID > 


Total lines: 15
Total errors: 0
