At Line No: 1 type_specifier: INT

int

At Line No: 1 type_specifier: INT

int

At Line No: 1 parameter_list: type_specifier id

int a

here in dummy token begin
(a, int)
here
At Line No: 2 variable : ID

a

At Line No: 2 factor: variable

a

At Line No: 2 unary_expression : factor

a

At Line No: 2 term :unary_expression

a

At Line No: 2 simple_expression : term

a

At Line No: 2 rel_expression	: simple_expression

a

At Line No: 2 logic_expression : rel_expression

a

At Line No: 2 expression : logic_expression

a

RETURN symbol->name: return

At Line No: 2 statement: RETURN expression SEMICOLON
return a ;

At Line No: 2 statements : statement

return a ;

here in dummy token end
At Line No: 3 compound_statement: LCURL dum statements RCURL dum

{ return a ; }

At Line No: 3 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func ( int a ) { return a ; }

At Line No: 3 unit : func_definition

int func ( int a ) { return a ; }

At Line No: 3 program : unit

int func ( int a ) { return a ; }

At Line No: 5 type_specifier: INT

int

here in dummy token begin
At Line No: 6 type_specifier: INT

int

At Line No: 6 declaration_list: ID LTHIRD CONST_INT RTHIRD

a[ 2]

At Line No: 6 declaration_list : declaration_list COMMA ID

a [ 2 ] , c

At Line No: 6 declaration_list : declaration_list COMMA ID

a [ 2 ] , c , i

At Line No: 6 declaration_list : declaration_list COMMA ID

a [ 2 ] , c , i , j

At Line No: 6 var_declaration: type_specifier declaration_list SEMICOLON

int a [ 2 ] , c , i , j ;

At Line No: 6 statement : var_declaration

int a [ 2 ] , c , i , j ;

At Line No: 6 statements : statement

int a [ 2 ] , c , i , j ;

At Line No: 6 type_specifier: FLOAT

float

At Line No: 6 declaration_list : ID

c

At Line No: 6 var_declaration: type_specifier declaration_list SEMICOLON

float c ;

At Line No: 6 statement : var_declaration

float c ;

At Line No: 6 statements : statements statement

int a [ 2 ] , c , i , j ; float c ;

At Line No: 7 factor: CONST_FLOAT

2.5

At Line No: 7 unary_expression : factor

2.5

At Line No: 7 term :unary_expression

2.5

At Line No: 7 simple_expression : term

2.5

At Line No: 7 rel_expression	: simple_expression

2.5

At Line No: 7 logic_expression : rel_expression

2.5

At Line No: 7 expression : logic_expression

2.5

float

At Line No: 7 variable : ID LTHIRD expression RTHIRD

a [ 2.5 ]

At Line No: 7 factor: CONST_INT

1

At Line No: 7 unary_expression : factor

1

At Line No: 7 term :unary_expression

1

At Line No: 7 simple_expression : term

1

At Line No: 7 rel_expression	: simple_expression

1

At Line No: 7 logic_expression : rel_expression

1

At Line No: 7 expression : variable ASSIGNOP logic_expression

a [ 2.5 ] = 1

At Line No: 7 expression SEMICOLON

a [ 2.5 ] = 1;

At Line No: 7 statement : expression_statement

a [ 2.5 ] = 1 ;

At Line No: 7 statements : statements statement

int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ;

At Line No: 8 variable : ID

i

At Line No: 8 factor: CONST_FLOAT

2.3

At Line No: 8 unary_expression : factor

2.3

At Line No: 8 term :unary_expression

2.3

At Line No: 8 simple_expression : term

2.3

At Line No: 8 rel_expression	: simple_expression

2.3

At Line No: 8 logic_expression : rel_expression

2.3

At Line No: 8 expression : variable ASSIGNOP logic_expression

i = 2.3

At Line No: 8 expression SEMICOLON

i = 2.3;

At Line No: 8 statement : expression_statement

i = 2.3 ;

At Line No: 8 statements : statements statement

int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ;

At Line No: 9 variable : ID

j

At Line No: 9 factor: CONST_INT

2

At Line No: 9 unary_expression : factor

2

At Line No: 9 term :unary_expression

2

At Line No: 9 factor: CONST_FLOAT

3.7

At Line No: 9 unary_expression : factor

3.7

At Line No: 9 term :term MULOP unary_expression

2 % 3.7

At Line No: 9 simple_expression : term

2 % 3.7

At Line No: 9 rel_expression	: simple_expression

2 % 3.7

At Line No: 9 logic_expression : rel_expression

2 % 3.7

At Line No: 9 expression : variable ASSIGNOP logic_expression

j = 2 % 3.7

At Line No: 9 expression SEMICOLON

j = 2 % 3.7;

At Line No: 9 statement : expression_statement

j = 2 % 3.7 ;

At Line No: 9 statements : statements statement

int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ;

At Line No: 10 variable : ID

a

At Line No: 10 factor: CONST_INT

4

At Line No: 10 unary_expression : factor

4

At Line No: 10 term :unary_expression

4

At Line No: 10 simple_expression : term

4

At Line No: 10 rel_expression	: simple_expression

4

At Line No: 10 logic_expression : rel_expression

4

At Line No: 10 expression : variable ASSIGNOP logic_expression

a = 4

At Line No: 10 expression SEMICOLON

a = 4;

At Line No: 10 statement : expression_statement

a = 4 ;

At Line No: 10 statements : statements statement

int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ;

At Line No: 11 variable : ID

a

At Line No: 11 factor: variable

a

At Line No: 11 unary_expression : factor

a

At Line No: 11 term :unary_expression

a

At Line No: 11 simple_expression : term

a

At Line No: 11 rel_expression	: simple_expression

a

At Line No: 11 logic_expression : rel_expression

a

At Line No: 11 arguments : logic_expression

a
At Line No: 11 argument_list : arguments

a
here
int : int
At Line No: 11 factor: id LPAREN argument_list RPAREN

func ( a )
At Line No: 11 unary_expression : factor

func ( a )

At Line No: 11 term :unary_expression

func ( a )

At Line No: 11 simple_expression : term

func ( a )

At Line No: 11 rel_expression	: simple_expression

func ( a )

At Line No: 11 logic_expression : rel_expression

func ( a )

At Line No: 11 expression : logic_expression

func ( a )

At Line No: 11 expression SEMICOLON

func ( a );

At Line No: 11 statement : expression_statement

func ( a ) ;

At Line No: 11 statements : statements statement

int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ;

At Line No: 12 variable : ID

b

At Line No: 12 factor: CONST_INT

8

At Line No: 12 unary_expression : factor

8

At Line No: 12 term :unary_expression

8

At Line No: 12 simple_expression : term

8

At Line No: 12 rel_expression	: simple_expression

8

At Line No: 12 logic_expression : rel_expression

8

At Line No: 12 expression : variable ASSIGNOP logic_expression

b = 8

At Line No: 12 expression SEMICOLON

b = 8;

At Line No: 12 statement : expression_statement

b = 8 ;

At Line No: 12 statements : statements statement

int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ; b = 8 ;

here
At Line No: 13 factor: CONST_INT

0

At Line No: 13 unary_expression : factor

0

At Line No: 13 term :unary_expression

0

At Line No: 13 simple_expression : term

0

At Line No: 13 rel_expression	: simple_expression

0

At Line No: 13 logic_expression : rel_expression

0

At Line No: 13 expression : logic_expression

0

RETURN symbol->name: return

At Line No: 13 statement: RETURN expression SEMICOLON
return 0 ;

At Line No: 13 statements : statements statement

int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ; b = 8 ; return 0 ;

here in dummy token end
At Line No: 14 compound_statement: LCURL dum statements RCURL dum

{ int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ; b = 8 ; return 0 ; }

At Line No: 14 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main ( ) { int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ; b = 8 ; return 0 ; }

At Line No: 14 unit : func_definition

int main ( ) { int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ; b = 8 ; return 0 ; }

At Line No: 14 program : program unit

int func ( int a ) { return a ; } int main ( ) { int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ; b = 8 ; return 0 ; }

At Line No: 15 start : program

int func ( int a ) { return a ; } int main ( ) { int a [ 2 ] , c , i , j ; float c ; a [ 2.5 ] = 1 ; i = 2.3 ; j = 2 % 3.7 ; a = 4 ; func ( a ) ; b = 8 ; return 0 ; }

